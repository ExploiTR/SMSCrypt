package app.exploitr.sec.scrypt.contacts;

import static contacts.core.ContactsKt.Contacts;
import static contacts.core.OrderByKt.asc;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;

import androidx.annotation.Nullable;

import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;

import java.util.HashMap;
import java.util.List;
import java.util.Spliterator;

import contacts.core.ContactsFields;
import contacts.core.entities.Contact;

public class ContactManager {
    private static HashMap<String, Contact> contactMap;

    /*
     * Run this only once.
     * Creates a local model for search efficiency
     * */
    public static void mapOrUpdateContacts(Context context, ContactMappingListener listener) {
        contactMap = new HashMap<>();
        getAllContactsArray(context, contacts -> {
            for (var contact : contacts) {
                if (contact != null) {
                    var rawContacts = contact.getRawContacts();
                    if (rawContacts.size() > 0)
                        for (var rawContact : rawContacts) {
                            var phones = rawContact.getPhones();
                            if (phones.size() > 0)
                                for (var phone : phones)
                                    contactMap.put(phone.getNormalizedNumber(), contact);
                        }
                }
            }
            listener.onMapComplete();
        });
    }

    /*
     * Info : query is auto-formatted to E164
     * */
    @Nullable
    public static Contact searchContactE164(String contact) {
        PhoneNumberUtil util = PhoneNumberUtil.getInstance();
        Phonenumber.PhoneNumber pNum = null;
        try {
            pNum = util.parse(contact, null);
        } catch (NumberParseException e) {
            e.printStackTrace();
        }
        String queryStr = contact;
        if (pNum != null) {
            queryStr = util.format(pNum, PhoneNumberUtil.PhoneNumberFormat.E164);
        }
        if (contactMap == null)
            throw new RuntimeException("Contacts aren't mapped! run ContactManager.mapOrUpdateContacts(...) first.");
        return contactMap.get(queryStr);
    }

    public static void getAllContactsArray(Context context, ContactArrayLoadingListener listener) {
        new Thread(() -> {
            var contacts = Contacts(context)
                    .query()
                    .orderBy(asc(ContactsFields.DisplayNamePrimary))
                    .find();
            new Handler(Looper.getMainLooper()).post(() -> listener.onLoadComplete(contacts));
        }).start();
    }

    public static Spliterator<Contact> getAllContactsIterator(Context context) {
        return Contacts(context).query().find().spliterator();
    }

    public static void searchContacts(Context context, String query, ContactArrayLoadingListener listener) {
        new Thread(() -> {
            PhoneNumberUtil util = PhoneNumberUtil.getInstance();
            Phonenumber.PhoneNumber pNum = null;
            try {
                pNum = util.parse(query, null);
            } catch (NumberParseException e) {
                e.printStackTrace();
            }
            String queryStr = query;
            if (pNum != null) {
                queryStr = util.format(pNum, PhoneNumberUtil.PhoneNumberFormat.E164);
            }
            var contacts = Contacts(context)
                    .phoneLookupQuery()
                    .whereExactlyMatches(queryStr)
                    .orderBy(asc(ContactsFields.DisplayNamePrimary))
                    .find();
            new Handler(Looper.getMainLooper()).post(() -> listener.onLoadComplete(contacts));
        }).start();
    }

    public interface ContactArrayLoadingListener {
        void onLoadComplete(List<Contact> contacts);
    }

    public interface ContactMappingListener {
        void onMapComplete();
    }
}
