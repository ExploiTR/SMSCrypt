package app.exploitr.sec.scrypt.contacts;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;

import java.util.ArrayList;

import app.exploitr.sec.scrypt.database.ConfigPreferences;
import app.exploitr.sec.scrypt.models.contact.ContactModel;
import io.realm.RealmList;

public class ContactManagerRealm {

    /**
     * Updates the contact database with the latest contact information.
     * <p>
     * This method retrieves contacts from the device, processes them, and updates the local Realm database
     * with the new contact information. It also keeps a record of the total contacts and the last update time.
     * The process is performed asynchronously in a separate thread.
     *
     * @param context                      The application context.
     * @param forceSkipCheckLastUpdateTime If true, skips the check for the last update time and performs the update regardless.
     * @param listener                     The listener to handle callbacks during the update process.
     *                                     Must implement the {@link ContactDatabaseListener} interface.
     *                                     Callbacks include onStart, onLoadSuccess, onLoadFailed, and onLoadFinish.
     */
    public static void updateDatabase(Context context, boolean forceSkipCheckLastUpdateTime, ContactDatabaseListener listener) {
        // TODO: Implement logic to check the last time update record
        listener.onStart();
        ContactManagerLegacy.getContacts(context, contacts -> new Thread(() -> {
            try {
                ArrayList<ContactModel> contactModels = new ArrayList<>();

                for (var contact : contacts)
                    if (contact != null) {
                        ContactModel model = new ContactModel();

                        RealmList<String> tempContact = new RealmList<>();

                        for (var rawContact : contact.getRawContacts())
                            for (var number : rawContact.getPhones()) {
                                String numStr;
                                if ((numStr = number.getNumber()) == null) // do not add null numbers
                                    continue;

                                //remove all whitespaces from numStr
                                numStr = numStr.replaceAll("\\s+", "");

                                //check if numStr already exists in tempContact or add it
                                if (!tempContact.contains(numStr))
                                    tempContact.add(numStr);
                            }

                        model.setContactNumbers(tempContact)
                                .setDisplayNamePrimary(contact.getDisplayNamePrimary())
                                .setDisplayNameAlt(contact.getDisplayNameAlt())
                                .setContact_id(contact.getId())
                                .setPhotoThumbnailUri(contact.getPhotoThumbnailUri())
                                .setPhotoUri(contact.getPhotoUri());

                        //todo : thumbnail and photoUri can be null, checks need to done while setting in UI

                        contactModels.add(model);
                    }

                ContactsController.updateContactsToDatabase(contactModels);

                //   keep record of total contacts and late update
                ConfigPreferences.getInstance(context).setNumOfContacts(contactModels.size());
                ConfigPreferences.getInstance(context).setContactLastUpdateTime(System.currentTimeMillis());

                new Handler(Looper.getMainLooper()).post(listener::onLoadSuccess);
                new Handler(Looper.getMainLooper()).post(listener::onLoadFinish);
            } catch (Exception ex) {
                ex.printStackTrace();
                new Handler(Looper.getMainLooper()).post(listener::onLoadFailed);
                new Handler(Looper.getMainLooper()).post(listener::onLoadFinish);
            }
        }).start());
    }

    public interface ContactDatabaseListener {
        void onStart();

        void onLoadSuccess();

        void onLoadFailed();

        void onLoadFinish();
    }
}
