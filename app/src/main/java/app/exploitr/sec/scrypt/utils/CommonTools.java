package app.exploitr.sec.scrypt.utils;

import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.os.Handler;
import android.os.Looper;

import androidx.appcompat.content.res.AppCompatResources;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import app.exploitr.sec.scrypt.R;

public class CommonTools {

    //Unused
    public static void generateDrawable(Context mContext, SecureRandom random, int insetLTRB, DrawableListener listener) {
        new Thread(() -> {
            Drawable con_image = AppCompatResources.getDrawable(mContext, R.drawable.ic_contact);
            int choose = random.nextInt(3);
            int r, g, b;
            if (choose == 0) {
                r = 255;
                g = random.nextInt(255);
                b = random.nextInt(255);
            } else if (choose == 1) {
                r = random.nextInt(255);
                g = 255;
                b = random.nextInt(255);
            } else {
                r = random.nextInt(255);
                g = random.nextInt(255);
                b = 255;
            }
            Drawable back_image = new ColorDrawable(Color.argb(255, r, g, b));
            if (con_image != null) {
                LayerDrawable finalDrawable = new LayerDrawable(new Drawable[]{back_image, con_image});
                finalDrawable.setLayerInset(1, insetLTRB, insetLTRB, insetLTRB, insetLTRB);
                new Handler(Looper.getMainLooper()).post(() -> listener.onComplete(finalDrawable));
            } else new Handler(Looper.getMainLooper()).post(listener::onFail);
        }).start();
    }

    public static void generateDrawable(Context mContext, String username, int insetLTRB, DrawableListener listener) {
        new Thread(() -> {
            Drawable con_image = AppCompatResources.getDrawable(mContext, R.drawable.ic_contact);

            Drawable back_image = new ColorDrawable(generateColor(username));
            if (con_image != null) {
                LayerDrawable finalDrawable = new LayerDrawable(new Drawable[]{back_image, con_image});
                finalDrawable.setLayerInset(1, insetLTRB, insetLTRB, insetLTRB, insetLTRB);
                new Handler(Looper.getMainLooper()).post(() -> listener.onComplete(finalDrawable));
            } else new Handler(Looper.getMainLooper()).post(listener::onFail);
        }).start();
    }

    public static int generateColor(String input) {
        try {
            // Create an MD5 hash of the input string
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] hashBytes = md.digest(input.getBytes());

            // Take the first three bytes of the hash as RGB values
            int r = hashBytes[0] & 0xFF;
            int g = hashBytes[1] & 0xFF;
            int b = hashBytes[2] & 0xFF;

            return Color.argb(255,r,g,b);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return Color.argb(255,255,255,255); // Return black color in case of an error
        }
    }

    public interface DrawableListener {
        void onComplete(Drawable drawable);

        void onFail();
    }
}
