package app.exploitr.sec.scrypt.ui.chats;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.widget.SearchView;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;

import java.util.ArrayList;
import java.util.List;

import app.exploitr.sec.scrypt.databinding.FragmentChatsBinding;
import app.exploitr.sec.scrypt.messages.SMSManager;
import app.exploitr.sec.scrypt.messages.SMSModel;

public class ChatsFragment extends Fragment {

    private FragmentChatsBinding binding;
    private final String[] permissions = new String[]{Manifest.permission.SEND_SMS, Manifest.permission.RECEIVE_SMS, Manifest.permission.READ_SMS};

    private final ActivityResultLauncher<String[]> requestPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestMultiplePermissions(), perm_map -> {
        boolean clear = true;
        for (boolean b : perm_map.values()) {
            if (!b) {
                clear = false;
                break;
            }
        }
        if (clear) {
            setupUI();
        } else {
            Toast.makeText(requireContext(), "Messages wont work without permissions :(", Toast.LENGTH_SHORT).show();
        }
    });

    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentChatsBinding.inflate(inflater, container, false);
        checkPermission();
        return binding.getRoot();
    }

    private void setupUI() {
        List<SMSModel> thread_list = new ArrayList<>();
        SMSManager.getSortedSMSList(getContext(), true, (data, unsortedData) -> {
            for (SMSModel[] data_list : data.values()) {
                thread_list.add(data_list[0]);
            }

            ChatsAdapter adapter = new ChatsAdapter(thread_list, requireContext(), this::onItemClick);
            binding.loadingMessages.setVisibility(View.INVISIBLE);
            binding.chatsList.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
            binding.chatsList.setAdapter(adapter);
            binding.chatsList.setLayoutManager(new LinearLayoutManager(requireContext()));

            updateUI();
        });
    }

    private void updateUI() {
        binding.searchChats.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                //search in chat
                return false;
            }
        });
    }

    private void onItemClick(SMSModel model, int position) {

    }

    private void checkPermission() {
        boolean clear = true;
        for (String perm : permissions) {
            clear = ContextCompat.checkSelfPermission(requireContext(), perm) == PackageManager.PERMISSION_GRANTED;
        }
        if (!clear) requestPermissionLauncher.launch(permissions);
        else {
            setupUI();
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}