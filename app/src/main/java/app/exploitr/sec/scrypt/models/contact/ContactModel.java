package app.exploitr.sec.scrypt.models.contact;

import android.net.Uri;

import javax.annotation.Nullable;

import io.realm.RealmList;
import io.realm.RealmObject;
import io.realm.annotations.PrimaryKey;

/**
 * Represents a contact model with information such as display names, contact numbers, and photo URIs.
 */
public class ContactModel extends RealmObject {

    //todo - encryption key for contact numbers

    /**
     * Flag indicating whether the contact is secure.
     * <p></p>
     * This is used to determine whether the contact is paired.
     * If the contact is secure only then selectedIndexForMNC will have valid value.
     *
     * @see #selectedIndexForMNC
     */
    private boolean isSecure;

    /**
     * Index of the selected number for multi-numbered contacts.
     * <p></p>
     * This is used to determine which number to use when sending messages.
     * has valid value only if contact is secure.
     *
     * @see #isSecure
     * @see #contactNumbers
     */
    private int selectedIndexForMNC;

    /**
     * Primary display name for the contact.
     */
    private String displayNamePrimary;

    /**
     * Alternate display name for the contact.
     */
    private String displayNameAlt;

    /**
     * Unique identifier for the contact.
     */
    @PrimaryKey
    private long contact_id;

    /**
     * List of contact numbers associated with the contact.
     */
    private RealmList<String> contactNumbers;

    /**
     * URI pointing to the full-sized photo of the contact.
     */
    private String photoUri;

    /**
     * URI pointing to the thumbnail-sized photo of the contact.
     */
    private String photoThumbnailUri;

    /**
     * Get the primary display name of the contact.
     *
     * @return The primary display name.
     */
    public String getDisplayNamePrimary() {
        return displayNamePrimary;
    }

    /**
     * Set the primary display name of the contact.
     *
     * @param displayNamePrimary The primary display name to set.
     * @return Reference to the current ContactModel instance for method chaining.
     */
    public ContactModel setDisplayNamePrimary(String displayNamePrimary) {
        this.displayNamePrimary = displayNamePrimary;
        return this;
    }

    /**
     * Get the alternate display name of the contact.
     *
     * @return The alternate display name.
     */
    public String getDisplayNameAlt() {
        return displayNameAlt;
    }

    /**
     * Set the alternate display name of the contact.
     *
     * @param displayNameAlt The alternate display name to set.
     * @return Reference to the current ContactModel instance for method chaining.
     */
    public ContactModel setDisplayNameAlt(String displayNameAlt) {
        this.displayNameAlt = displayNameAlt;
        return this;
    }

    /**
     * Get the unique identifier of the contact.
     *
     * @return The contact's unique identifier.
     */
    public long getContact_id() {
        return contact_id;
    }

    /**
     * Set the unique identifier of the contact.
     *
     * @param contact_id The unique identifier to set.
     * @return Reference to the current ContactModel instance for method chaining.
     */
    public ContactModel setContact_id(long contact_id) {
        this.contact_id = contact_id;
        return this;
    }

    /**
     * Get the list of contact numbers associated with the contact.
     *
     * @return List of contact numbers.
     */
    public RealmList<String> getContactNumbers() {
        return contactNumbers;
    }

    /**
     * Set the list of contact numbers associated with the contact.
     *
     * @param contactNumbers The list of contact numbers to set.
     * @return Reference to the current ContactModel instance for method chaining.
     */
    public ContactModel setContactNumbers(RealmList<String> contactNumbers) {
        this.contactNumbers = contactNumbers;
        return this;
    }

    /**
     * Get the URI pointing to the full-sized photo of the contact.
     *
     * @return The URI of the full-sized photo.
     */
    @Nullable
    public Uri getPhotoUri() {
        Uri uri;
        try {
            uri = Uri.parse(this.photoUri);
        } catch (Exception ex) {
            return null;
        }
        return uri;
    }

    /**
     * Set the URI pointing to the full-sized photo of the contact.
     *
     * @param photoUri The URI of the full-sized photo to set.
     */
    public void setPhotoUri(Uri photoUri) {
        if (photoUri == null) {
            this.photoUri = null;
            return;
        }
        this.photoUri = photoUri.toString();
    }

    /**
     * Get the URI pointing to the thumbnail-sized photo of the contact.
     *
     * @return The URI of the thumbnail-sized photo.
     */
    @Nullable
    public Uri getPhotoThumbnailUri() {
        Uri uri;
        try {
            uri = Uri.parse(this.photoThumbnailUri);
        } catch (Exception ex) {
            return null;
        }
        return uri;
    }

    /**
     * Set the URI pointing to the thumbnail-sized photo of the contact.
     *
     * @param photoThumbnailUri The URI of the thumbnail-sized photo to set.
     * @return Reference to the current ContactModel instance for method chaining.
     */
    public ContactModel setPhotoThumbnailUri(Uri photoThumbnailUri) {
        if (photoThumbnailUri == null) {
            this.photoThumbnailUri = null;
            return this;
        }
        this.photoThumbnailUri = photoThumbnailUri.toString();
        return this;
    }
}
