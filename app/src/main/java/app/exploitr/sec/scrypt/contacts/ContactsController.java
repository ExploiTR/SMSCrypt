package app.exploitr.sec.scrypt.contacts;

import androidx.annotation.Nullable;

import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;

import app.exploitr.sec.scrypt.database.GenericRealmController;
import app.exploitr.sec.scrypt.models.contact.ContactModel;
import app.exploitr.sec.scrypt.utils.Logger;
import io.realm.OrderedRealmCollectionChangeListener;
import io.realm.RealmChangeListener;
import io.realm.RealmResults;

/**
 * The ContactsController class provides methods to manage contacts in a Realm database.
 */
public class ContactsController extends GenericRealmController {

    //method to update all contact models to realm
    public static void updateContactsToDatabase(Iterable<ContactModel> contacts) {
        copyAllToRealm(contacts);
    }

    /**
     * Searches for contacts based on a phone number.
     *
     * @param contact The phone number to search for.
     * @return A RealmResults object containing the contacts that match the search criteria.
     */
    @Nullable
    public static ContactModel searchContactE164(String contact) {
        PhoneNumberUtil util = PhoneNumberUtil.getInstance();
        Phonenumber.PhoneNumber pNum = null;
        try {
            pNum = util.parse(contact, null);
        } catch (NumberParseException e) {
            //  e.printStackTrace();
        }
        if (pNum != null) {
            contact = util.format(pNum, PhoneNumberUtil.PhoneNumberFormat.E164);
        }

        contact = contact.replaceAll("\\s", "");

        Logger.LOG_STEP("Searching for : " + contact);

        var contacts = searchContacts(contact);
        if (contacts.size() > 0) {
            return contacts.get(0);
        }
        return null;
    }

    /**
     * Searches for contacts based on a phone number.
     *
     * @param phoneNumber The phone number to search for.
     * @return A RealmResults object containing the contacts that match the search criteria.
     */
    public static RealmResults<ContactModel> searchContacts(String phoneNumber) {
        return GenericRealmController.getRealmInstance()
                .where(ContactModel.class)
                .endsWith("contactNumbers", phoneNumber) //handle both cc and no-cc numbers
                .contains("contactNumbers", phoneNumber)
                .beginsWith("contactNumbers", phoneNumber)
                .findAll();
    }

    /**
     * Retrieves a contact by its phone number.
     *
     * @param phoneNumber The phone number of the contact to retrieve.
     * @param listener    A listener to be notified when the contact is retrieved.
     */
    public static void getContactByNumber(String phoneNumber, RealmChangeListener<ContactModel> listener) {
        GenericRealmController.getRealmInstance()
                .where(ContactModel.class)
                .endsWith("contactNumbers", phoneNumber) //handle both cc and no-cc numbers
                .contains("contactNumbers", phoneNumber)
                .beginsWith("contactNumbers", phoneNumber)
                .findFirstAsync().addChangeListener(listener);
    }

    /**
     * Retrieves a contact by its unique ID.
     *
     * @param contact_id The ID of the contact to retrieve.
     * @param listener   A listener to be notified when the contact is retrieved.
     */
    public static void getContactById(long contact_id, RealmChangeListener<ContactModel> listener) {
        GenericRealmController.getRealmInstance()
                .where(ContactModel.class)
                .equalTo("contact_id", contact_id)
                .findFirstAsync().addChangeListener(listener);
    }

    /**
     * Deletes a contact by its unique ID.
     *
     * @param contact_id The ID of the contact to delete.
     * @param listener   A listener to be notified when the contact is deleted.
     */
    public static void deleteContactById(long contact_id, OrderedRealmCollectionChangeListener<RealmResults<ContactModel>> listener) {
        GenericRealmController.getRealmInstance()
                .where(ContactModel.class)
                .equalTo("contact_id", contact_id)
                .findAllAsync().addChangeListener(contactModels -> {
                    if (contactModels.isLoaded() && !contactModels.isEmpty()) {
                        contactModels.addChangeListener(listener);
                        contactModels.deleteAllFromRealm();
                    }
                });
    }

    /**
     * Retrieves contacts from the local Realm database and invokes the provided listener upon completion.
     * <p>
     * This method retrieves contacts from the local Realm database and invokes the provided listener upon completion.
     * The listener must implement the {@link ContactLoadingListener} interface.
     *
     * @param listener The listener to be notified when the contacts retrieval is complete.
     */
    public static void getAllContacts(ContactLoadingListener listener) {
        listener.onLoadComplete(getAllFromRealm(ContactModel.class));
    }

    /**
     * Deletes all contacts from the local Realm database.
     */
    public static void deleteAllContacts() {
        getRealmInstance().executeTransactionAsync(realm -> realm.delete(ContactModel.class));
    }

    public interface ContactLoadingListener {
        void onLoadComplete(RealmResults<ContactModel> contacts);
    }
}
