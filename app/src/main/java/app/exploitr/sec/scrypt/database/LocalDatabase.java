package app.exploitr.sec.scrypt.database;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;
import android.util.Log;

import androidx.preference.PreferenceManager;

import java.security.GeneralSecurityException;

import app.exploitr.sec.scrypt.security.AESUtil;

public class LocalDatabase {
    private static SharedPreferences preferenceManager;
    private static LocalDatabase database;

    private final String CONST_ALIAS = "l2u&$260YZi";
    private final String CONST_PHONE = "kV5wY9e#822";
    private final String MASTER_PWD_CHK = "#H5q1#g9N3#";
    private final String VERIFY_MASTER_PWD_STR = "X5Zekl@uZ76";
    private final String LOCKOUT = "f9L@2!a5u7V";

    private LocalDatabase() {
        var z = gen_RaLoEnKe();
    }

    public static LocalDatabase getInstance(Context context) {
        if (database == null || preferenceManager == null) {
            preferenceManager = PreferenceManager.getDefaultSharedPreferences(context);
            return database = new LocalDatabase();
        }
        return database;
    }

    public void setAlias(String alias) {
        preferenceManager.edit().putString(CONST_ALIAS, alias).apply();
    }

    public void setPhone(String phone) {
        preferenceManager.edit().putString(CONST_PHONE, phone).apply();
    }

    public void setMasterPasswordEncryptedText(String masterPwd) throws GeneralSecurityException {
        preferenceManager.edit().putString(MASTER_PWD_CHK, AESUtil.encrypt(masterPwd, VERIFY_MASTER_PWD_STR)).apply();
    }


    public String getAlias() {
        return preferenceManager.getString(CONST_ALIAS, "?");
    }

    public String getPhone() {
        return preferenceManager.getString(CONST_PHONE, "");
    }

    public boolean getMasterPasswordVerificationTestSuccess(String masterPwd) throws GeneralSecurityException {
        return VERIFY_MASTER_PWD_STR.equals(AESUtil.decrypt(masterPwd, preferenceManager.getString(MASTER_PWD_CHK, null)));
    }

    public static String gen_RaLoEnKe() {
        Log.wtf("WTF", "Usually comments are removed from the code..... so basically I'm just having some fun ." +
                " Good luck with your adventure here, I hope you find something cool lmao <3, " +
                "and uh I just wanted to waste some time with this method. Btw fuck you :P ");

        var y1 = Build.FINGERPRINT;
        var y2 = Build.HARDWARE;
        var y4 = Build.FINGERPRINT;
        var y5 = Build.HARDWARE;
        var y6 = Build.MANUFACTURER;

        y1 = y1.substring(y1.length() / 4, y1.length() / 2);
        y2 = y2.substring(y2.length() / 4);
        y6 = y6.substring(y6.length() / 4, y6.length() / 2);
        y4 = y4.substring(y4.length() / 4);
        y5 = y5.substring(y5.length() / 4, y5.length() / 2);

        var z73 = (y1.length() > y2.length()) ? y1 : y2 + y4 + y5 + y6;
        z73 = z73.length() > 8 ? z73.substring(0, 4) + z73.substring(z73.length() - 4) : z73;

        Log.wtf("WTF", "Printing secret MV$T3R password, so this guy can send a bug report LOL : " + z73);

        return z73;
    }
}
