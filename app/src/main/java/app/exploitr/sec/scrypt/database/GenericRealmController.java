package app.exploitr.sec.scrypt.database;

import android.content.Context;
import android.util.Log;

import io.realm.Realm;
import io.realm.RealmConfiguration;
import io.realm.RealmModel;
import io.realm.RealmResults;

/**
 * Utility class for managing Realm database initialization and obtaining a Realm instance.
 */
public abstract class GenericRealmController {

    private static Realm savedInstance;

    /**
     * Initializes Realm with the provided Android context.
     *
     * @param context The Android context used for initializing Realm.
     */
    public static void start(Context context) {
        Realm.init(context);
    }

    /**
     * Closes the Realm instance if it is open.
     */
    public static void stop() {
        if (savedInstance != null && !savedInstance.isClosed()) {
            savedInstance.close();
        }
    }

    /**
     * Retrieves a Realm instance with a specified configuration.
     *
     * @return A Realm instance configured with the specified settings.
     *
     * <p><p/>
     * todo **WARNING:** DEBUGGING ONLY CODE : shouldn't be used in prod #deleteRealmIfMigrationNeeded(), need to setup migration
     */
    protected static Realm getRealmInstance() {
        if (savedInstance != null && !savedInstance.isClosed()) {
            return savedInstance;
        }

        Log.e("RealmController", "\n****⚠️ WARNING: DEBUGGING ONLY CODE ****\n");

        // Define Realm configuration with specific settings
        var realmConfig = new RealmConfiguration.Builder()
                .schemaVersion(1)
                .allowQueriesOnUiThread(true)
                .allowWritesOnUiThread(true)
                .deleteRealmIfMigrationNeeded()
                .build();

        // Obtain and return a Realm instance with the configured settings
        return (savedInstance = Realm.getInstance(realmConfig));
    }


    /**
     * This method copies+updates multiple objects to the Realm database.
     *
     * @param objects The object to be copied to the Realm database.
     */
    protected static <E extends RealmModel> void copyAllToRealm(Iterable<E> objects) {
        getRealmInstance().executeTransactionAsync(realm -> {
            realm.copyToRealmOrUpdate(objects);
            realm.close();
        });
    }

    /**
     * This method retrieves all the objects of a given class from the Realm database and notifies a listener when the query is completed.
     *
     * @param clazz the class of the objects to be retrieved, which must extend RealmModel
     */
    protected static <E extends RealmModel> RealmResults<E> getAllFromRealm(Class<E> clazz) {
        return getRealmInstance().where(clazz).findAll();
    }
}
