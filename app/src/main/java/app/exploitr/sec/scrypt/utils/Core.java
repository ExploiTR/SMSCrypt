package app.exploitr.sec.scrypt.utils;

import android.app.Activity;
import android.app.Application;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.lang.ref.WeakReference;

public class Core extends Application {

    public static WeakReference<String> MASTER_PASSWORD = new WeakReference<>("8HT*&T%^VE%^$FC&&IRF%V^^E$F%&");
    public static boolean SHOULD_LOAD_MASTER_PASSWORD = true;

    @Override
    public void onCreate() {
        super.onCreate();
        registerActivityLifecycleCallbacks(new AppLifecycleCallback());

        /*
        try {
            var testPairs = new String[]{"abacaba", "chibachiba"};
            ECCUtil.clearPairs(testPairs);
            KeyPair one = ECCUtil.generateKeys(testPairs[0]);
            KeyPair two = ECCUtil.generateKeys(testPairs[1]);

            byte[] sec_one = ECCUtil.sharedSecret(one.getPrivate(), two.getPublic());
            byte[] sec_two = ECCUtil.sharedSecret(two.getPrivate(), one.getPublic());

            byte[][] info_1 = ECCUtil.generateSaltAndInfo(one.getPublic(), two.getPublic());
            AesGcmSiv first_key = ECCUtil.exchangeKey(sec_one, info_1[0], info_1[1]);

            byte[][] info_2 = ECCUtil.generateSaltAndInfo(two.getPublic(), one.getPublic());
            AesGcmSiv second_key = ECCUtil.exchangeKey(sec_two, info_2[0], info_2[1]);

            var temp = ECCUtil.publicToString(one.getPublic());
            var test = ECCUtil.stringToPublic(temp);

            var e1 = Base64.encodeToString(one.getPublic().getEncoded(), Base64.NO_PADDING | Base64.NO_CLOSE | Base64.NO_WRAP);
            var e2 = Base64.encodeToString(test.getEncoded(), Base64.NO_PADDING | Base64.NO_CLOSE | Base64.NO_WRAP);
            Log.d("TAG >> 1", e1);
            Log.d("TAG >> 2", e2);

            Log.d("TAG >> Res", String.valueOf(e1.equals(e2)));

        } catch (Exception e) {
            e.printStackTrace();
        }
         */
    }

    private class AppLifecycleCallback implements ActivityLifecycleCallbacks {
        @Override
        public void onActivityPreResumed(@NonNull Activity activity) {
            SHOULD_LOAD_MASTER_PASSWORD = true;
            ActivityLifecycleCallbacks.super.onActivityPreResumed(activity);
        }

        @Override
        public void onActivityPrePaused(@NonNull Activity activity) {
            destroyMasterPassword();
            ActivityLifecycleCallbacks.super.onActivityPrePaused(activity);
        }

        @Override
        public void onActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState) {
        }

        @Override
        public void onActivityStarted(@NonNull Activity activity) {
        }

        @Override
        public void onActivityResumed(@NonNull Activity activity) {
        }

        @Override
        public void onActivityPaused(@NonNull Activity activity) {
        }

        @Override
        public void onActivityStopped(@NonNull Activity activity) {
        }

        @Override
        public void onActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState) {
        }

        @Override
        public void onActivityDestroyed(@NonNull Activity activity) {
        }
    }

    public static void setMasterPassword(String password) {
        MASTER_PASSWORD = new WeakReference<>(password);
        SHOULD_LOAD_MASTER_PASSWORD = false;
    }

    private void destroyMasterPassword() {
        MASTER_PASSWORD.clear();
        MASTER_PASSWORD = new WeakReference<>("8HT*&T%^VE%^$FC&&IRF%V^^E$F%&");
        SHOULD_LOAD_MASTER_PASSWORD = false;
    }
}
