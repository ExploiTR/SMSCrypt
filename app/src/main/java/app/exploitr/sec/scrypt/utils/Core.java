package app.exploitr.sec.scrypt.utils;

import android.app.Activity;
import android.app.Application;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.lang.ref.WeakReference;

import app.exploitr.sec.scrypt.database.LocalDatabase;

public class Core extends Application {

    public static WeakReference<String> MASTER_PASSWORD = new WeakReference<>("");
    public static boolean SHOULD_LOAD_MASTER_PASSWORD = true;

    @Override
    public void onCreate() {
        super.onCreate();
        registerActivityLifecycleCallbacks(new AppLifecycleCallback());
    }

    private class AppLifecycleCallback implements ActivityLifecycleCallbacks {
        @Override
        public void onActivityPreResumed(@NonNull Activity activity) {
            SHOULD_LOAD_MASTER_PASSWORD = true;
            ActivityLifecycleCallbacks.super.onActivityPreResumed(activity);
        }

        @Override
        public void onActivityPrePaused(@NonNull Activity activity) {
            destroyMasterPassword();
            ActivityLifecycleCallbacks.super.onActivityPrePaused(activity);
        }

        @Override
        public void onActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState) {
        }

        @Override
        public void onActivityStarted(@NonNull Activity activity) {
        }

        @Override
        public void onActivityResumed(@NonNull Activity activity) {
        }

        @Override
        public void onActivityPaused(@NonNull Activity activity) {
        }

        @Override
        public void onActivityStopped(@NonNull Activity activity) {
        }

        @Override
        public void onActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState) {
        }

        @Override
        public void onActivityDestroyed(@NonNull Activity activity) {
        }
    }

    public static void setMasterPassword(String password) {
        MASTER_PASSWORD = new WeakReference<>(password);
        SHOULD_LOAD_MASTER_PASSWORD = false;
    }

    private void destroyMasterPassword() {
        MASTER_PASSWORD.clear();
        MASTER_PASSWORD = new WeakReference<>("8HT*&T%^VE%^$FC&&IRF%V^^E$F%&");
        SHOULD_LOAD_MASTER_PASSWORD = false;
    }
}
