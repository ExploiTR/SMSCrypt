package app.exploitr.sec.scrypt.ui.dashboard;

import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.budiyev.android.codescanner.CodeScanner;
import com.budiyev.android.codescanner.CodeScannerView;
import com.budiyev.android.codescanner.DecodeCallback;
import com.google.zxing.Result;

import org.json.JSONException;
import org.json.JSONObject;

import androidmads.library.qrgenearator.QRGContents;
import androidmads.library.qrgenearator.QRGEncoder;
import app.exploitr.sec.scrypt.R;
import app.exploitr.sec.scrypt.database.ContactModel;
import app.exploitr.sec.scrypt.database.LocalDatabase;
import app.exploitr.sec.scrypt.databinding.FragmentDashboardBinding;
import app.exploitr.sec.scrypt.utils.SMSManager;

public class DashboardFragment extends Fragment {

    private FragmentDashboardBinding binding;
    private CodeScanner mCodeScanner;
    private AlertDialog scanView;

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        DashboardViewModel dashboardViewModel =
                new ViewModelProvider(this).get(DashboardViewModel.class);

        binding = FragmentDashboardBinding.inflate(inflater, container, false);
        View root = binding.getRoot();

        generateQRCode();
        setupScan();

        binding.insButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                var dg = new AlertDialog.Builder(requireActivity())
                        .setMessage(getString(R.string.instructions_x))
                        .create();
                if (!requireActivity().isFinishing())
                    dg.show();
            }
        });

        return root;
    }

    private void setupScan() {
        CodeScannerView scannerView = getLayoutInflater().inflate(R.layout.scan_view, null).findViewById(R.id.scanner);

        scanView = new AlertDialog.Builder(requireActivity())
                .setView(scannerView)
                .setCancelable(true)
                .create();

        mCodeScanner = new CodeScanner(requireContext(), scannerView);
        mCodeScanner.setDecodeCallback(new DecodeCallback() {
            @Override
            public void onDecoded(@NonNull final Result result) {
                requireActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            processScan(result);
                        } catch (JSONException e) {
                            e.printStackTrace();
                            Toast.makeText(getContext(), e.toString(), Toast.LENGTH_SHORT).show();
                        }
                        mCodeScanner.stopPreview();
                        scanView.dismiss();
                    }
                });
            }
        });

        binding.scanButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!requireActivity().isFinishing() && !scanView.isShowing()) {
                    mCodeScanner.startPreview();
                    scanView.show();
                }
            }
        });
    }

    private void processScan(Result result) throws JSONException {
        JSONObject object = new JSONObject(result.getText());
        var con = object.getString(ContactModel.CONTACT_IDENTIFIER);
        var als = object.getString(ContactModel.ALIAS_IDENTIFIER);

        promptPairing(con, als);
    }

    private void promptPairing(String con, String als) {
        new AlertDialog.Builder(requireActivity())
                .setTitle("Prompt")
                .setMessage("Send pairing message to : " + als + " at " + con + " ?")
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        sendPairingMessage(con);
                    }
                })
                .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        Toast.makeText(getContext(), "Pairing Cancelled!", Toast.LENGTH_SHORT).show();
                    }
                })
                .setCancelable(false)
                .create();
    }

    private void sendPairingMessage(String con) {
        SMSManager.sendPairingMessage("");
    }

    private void generateQRCode() {
        QRGEncoder qrgEncoder = new QRGEncoder(getData() == null ? "ERR" : getData(), null, QRGContents.Type.TEXT, 480);
        qrgEncoder.setColorBlack(Color.WHITE);
        if (getContext() != null)
            qrgEncoder.setColorWhite(getContext().getColor(R.color.dark_blue));

        binding.qrView.setImageBitmap(qrgEncoder.getBitmap());
    }

    @Nullable
    private String getData() {
        //get phone number
        var db = LocalDatabase.getInstance(getContext());
        String alias = db.getAlias();
        String contact = db.getPhone();

        JSONObject object = new JSONObject();
        try {
            object.put(ContactModel.ALIAS_IDENTIFIER, alias);
            object.put(ContactModel.CONTACT_IDENTIFIER, contact);
            return object.toString();
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void onDestroyView() {
        mCodeScanner.stopPreview();
        super.onDestroyView();
        binding = null;
    }
}