package app.exploitr.sec.scrypt.ui.dashboard;

import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.budiyev.android.codescanner.CodeScanner;
import com.budiyev.android.codescanner.CodeScannerView;
import com.budiyev.android.codescanner.DecodeCallback;
import com.google.zxing.Result;

import org.json.JSONException;
import org.json.JSONObject;

import androidmads.library.qrgenearator.QRGContents;
import androidmads.library.qrgenearator.QRGEncoder;
import app.exploitr.sec.scrypt.R;
import app.exploitr.sec.scrypt.database.LocalDatabase;
import app.exploitr.sec.scrypt.databinding.FragmentDashboardBinding;

public class DashboardFragment extends Fragment {

    private FragmentDashboardBinding binding;
    private CodeScanner mCodeScanner;
    private AlertDialog scanView;

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        DashboardViewModel dashboardViewModel =
                new ViewModelProvider(this).get(DashboardViewModel.class);

        binding = FragmentDashboardBinding.inflate(inflater, container, false);
        View root = binding.getRoot();

        generateQRCode();
        setupScan();

        return root;
    }

    private void setupScan() {
        LinearLayoutCompat compat = new LinearLayoutCompat(requireContext());
        CodeScannerView scannerView = new CodeScannerView(requireContext());
        compat.setLayoutParams(new LinearLayoutCompat.LayoutParams(500, 500));
        compat.addView(scannerView, new LinearLayoutCompat.LayoutParams(500, 500));

        scanView = new AlertDialog.Builder(requireActivity())
                .setView(compat)
                .setCancelable(true)
                .create();

        mCodeScanner = new CodeScanner(requireContext(), scannerView);
        mCodeScanner.setDecodeCallback(new DecodeCallback() {
            @Override
            public void onDecoded(@NonNull final Result result) {
                requireActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Log.d("TAG", result.getText());
                    }
                });
            }
        });

        binding.scanButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!requireActivity().isFinishing() && !scanView.isShowing()) {
                    mCodeScanner.startPreview();
                    scanView.show();
                }
            }
        });
    }

    private void generateQRCode() {
        QRGEncoder qrgEncoder = new QRGEncoder(getData() == null ? "ERR" : getData(), null, QRGContents.Type.TEXT, 600);
        qrgEncoder.setColorBlack(Color.WHITE);
        if (getContext() != null)
            qrgEncoder.setColorWhite(getContext().getColor(R.color.dark_blue));

        binding.qrView.setImageBitmap(qrgEncoder.getBitmap());
    }

    @Nullable
    private String getData() {
        //get phone number
        var db = LocalDatabase.getInstance(getContext());
        String alias = db.getAlias();
        String contact = db.getPhone();

        JSONObject object = new JSONObject();
        try {
            object.put("alias", alias);
            object.put("contact", contact);
            return object.toString();
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}