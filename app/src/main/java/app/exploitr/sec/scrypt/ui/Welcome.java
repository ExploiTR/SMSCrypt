package app.exploitr.sec.scrypt.ui;

import android.Manifest;
import android.app.Activity;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.telephony.SubscriptionInfo;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.text.Editable;
import android.view.View;
import android.widget.Toast;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.IntentSenderRequest;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import com.google.android.gms.auth.api.identity.GetPhoneNumberHintIntentRequest;
import com.google.android.gms.auth.api.identity.Identity;
import com.google.android.gms.tasks.OnFailureListener;

import java.security.GeneralSecurityException;
import java.util.List;

import app.exploitr.sec.scrypt.MainActivity;
import app.exploitr.sec.scrypt.database.LocalDatabase;
import app.exploitr.sec.scrypt.databinding.ActivityWelcomeBinding;
import app.exploitr.sec.scrypt.utils.Iso2Phone;

public class Welcome extends AppCompatActivity {

    private KeyguardManager keyguardManager;
    private Intent confirmationIntent;
    private ActivityResultLauncher<Intent> verificationLauncher;
    private ActivityWelcomeBinding binding;
    ActivityResultLauncher<IntentSenderRequest> phoneNumberHintIntentResultLauncher =
            registerForActivityResult(
                    new ActivityResultContracts.StartIntentSenderForResult(), result -> {
                        try {
                            String phoneNumber = Identity.getSignInClient(getApplicationContext()).getPhoneNumberFromIntent(result.getData());
                            System.out.println(phoneNumber);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityWelcomeBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        setup();
        keyguardManager = (KeyguardManager) getApplicationContext().getSystemService(Context.KEYGUARD_SERVICE);

        if (secureDevice()) {
            confirmationIntent = keyguardManager.createConfirmDeviceCredentialIntent("Confirm Screen Lock", "Helps us to reuse the authentication used by your device.");
            tryConfirmAuth();
            moveForward(); //todo remove
        } else {
            Toast.makeText(this, "Please enable screen lock to use the application.", Toast.LENGTH_SHORT).show();
        }
    }

    private void setup() {
        verificationLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == Activity.RESULT_OK) {
                        moveForward();
                    } else {
                        Toast.makeText(Welcome.this, "Couldn't verify screen lock, try again?", Toast.LENGTH_SHORT).show();
                        binding.retryAuth.setVisibility(View.VISIBLE);
                        binding.loadingWelcome.setVisibility(View.INVISIBLE);
                        binding.aliasLayout.setVisibility(View.INVISIBLE);
                        binding.phoneLayout.setVisibility(View.INVISIBLE);
                        binding.signUpAnim.setVisibility(View.INVISIBLE);
                        binding.masterPassLayout.setVisibility(View.INVISIBLE);
                        binding.continueNext.setVisibility(View.INVISIBLE);
                    }
                });

        binding.retryAuth.setOnClickListener(v -> {
            binding.loadingWelcome.setVisibility(View.VISIBLE);
            tryConfirmAuth();
        });

        binding.phoneInput.setOnFocusChangeListener((view, b) -> {
            if (b) {
                showPhoneNumberOptions();
            }
        });
    }

    private void showPhoneNumberOptions() {
        GetPhoneNumberHintIntentRequest request = GetPhoneNumberHintIntentRequest.builder().build();

        Identity.getSignInClient(this)
                .getPhoneNumberHintIntent(request)
                .addOnSuccessListener(result -> {
                    try {
                        phoneNumberHintIntentResultLauncher.launch(new IntentSenderRequest.Builder(result.getIntentSender()).build());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        e.printStackTrace();
                        //try legacy mode
                        showPhoneNumberOptionsLegacy();
                    }
                });
    }

    private void showPhoneNumberOptionsLegacy() {
        //check and ask for permission
        SubscriptionManager subscriptionManager = (SubscriptionManager) getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE);
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            //show why

        }
        List<SubscriptionInfo> subsInfoList = subscriptionManager.getActiveSubscriptionInfoList();

        for (SubscriptionInfo subscriptionInfo : subsInfoList) {
            String number = subscriptionInfo.getNumber();
        }
    }

    private void moveForward() {
        LocalDatabase da = LocalDatabase.getInstance(getBaseContext());

        if (da.getPhone() != null && !da.getPhone().isEmpty()) {
            startActivity(new Intent(Welcome.this, MainActivity.class));
            Welcome.this.finish();
            return;
        }

        binding.retryAuth.setVisibility(View.INVISIBLE);
        binding.loadingWelcome.setVisibility(View.INVISIBLE);
        binding.aliasLayout.setVisibility(View.VISIBLE);
        binding.phoneLayout.setVisibility(View.VISIBLE);
        binding.signUpAnim.setVisibility(View.VISIBLE);
        binding.masterPassLayout.setVisibility(View.VISIBLE);
        binding.continueNext.setVisibility(View.VISIBLE);

        TelephonyManager telephonyManager = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
        if (telephonyManager != null) {
            binding.phoneInput.setText(Iso2Phone.getPhone(telephonyManager.getNetworkCountryIso()));
        }

        binding.aliasInput.setText("");

        binding.continueNext.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Editable elo;
                Editable geo;
                Editable neo;

                boolean clear = true;

                elo = binding.aliasInput.getText();
                if ((elo) != null && elo.length() >= 3) {
                    da.setAlias(elo.toString());
                } else {
                    binding.aliasLayout.setError("Too short alias name!");
                    clear = false;
                }

                geo = binding.phoneInput.getText();
                if ((geo) != null && geo.length() >= 6) {
                    da.setPhone(geo.toString());
                } else {
                    binding.phoneLayout.setError("Invalid phone number!");
                    clear = false;
                }

                neo = binding.masterPassInput.getText();
                if ((neo) != null && neo.length() >= 4) {
                    try {
                        da.setMasterPasswordEncryptedText(neo.toString());
                    } catch (GeneralSecurityException e) {
                        binding.masterPassLayout.setError("Unknown error occurred while testing encryption!");
                        clear = false;
                        e.printStackTrace();
                    }
                } else {
                    binding.masterPassLayout.setError("Too short encryption key!");
                    clear = false;
                }

                if (clear) {
                    startActivity(new Intent(Welcome.this, MainActivity.class));
                    Welcome.this.finish();
                }
            }
        });
    }

    private void tryConfirmAuth() {
        verificationLauncher.launch(confirmationIntent);
    }

    private boolean secureDevice() {
        return keyguardManager.isDeviceSecure() && keyguardManager.isKeyguardSecure();
    }
}