package app.exploitr.sec.scrypt.pairing;

public enum PairingConstants {
    /**
     * Pairing has been reset or was never initialized
     */
    PAIRING_STATUS_READY_TO_PAIR(1),

    /**
     * Pairing has initialized, means key is generated and waiting to be sent as sms
     */
    PAIRING_STATUS_INITIALIZED(2),

    /**
     * Pairing has started, means generated key is sent via sms to RECEIVER | OR Pairing request is received from the INITIALIZER
     */
    PAIRING_STATUS_STARTED(3),

    /**
     * Received key (public key) as sms from RECEIVER | OR Public key is received from the INITIALIZER
     */
    PAIRING_STATUS_RECEIVED_KEY(4),

    /**
     * Key is generated and an ACK is waiting to be sent as sms to RECEIVER | OR Key is generated and an ACK is waiting to be sent as sms to INITIALIZER
     */
    PAIRING_STATUS_GENERATED_ACK(4),

    /**
     * ACK is sent as sms to the RECEIVER, waiting for reply | OR ACK is sent as sms to the INITIALIZER, waiting for reply
     */
    PAIRING_STATUS_WAITING_FOR_ACK_REPLY(5),

    /**
     * ACK verification successful, paired!
     */
    PAIRING_STATUS_PAIR_SUCCESS(5),

    /**
     * Pairing failed! waiting for pairing reset SMS to be sent
     */
    PAIRING_STATUS_PAIR_FAILED(6),

    /**
     * User has requested for pairing cancellation or sent pairing reset sms
     */
    PAIRING_STATUS_CANCEL_DEL_REQUESTED(7),

    /**
     * Pairing cancellation request/pairing reset request is sent to other party and waiting for reply
     */
    PAIRING_STATUS_CANCEL_DEL_WAITING_FOR_ACK(8);

    private final int state;

    PairingConstants(int pairing_status) {
        this.state = pairing_status;
    }

    public int getStatus() {
        return state;
    }
}
