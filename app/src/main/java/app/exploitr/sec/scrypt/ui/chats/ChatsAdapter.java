package app.exploitr.sec.scrypt.ui.chats;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;

import java.security.SecureRandom;
import java.util.List;

import app.exploitr.sec.scrypt.R;
import app.exploitr.sec.scrypt.contacts.ContactManager;
import app.exploitr.sec.scrypt.databinding.ListMessageShortItemBinding;
import app.exploitr.sec.scrypt.models.SMSModel;
import app.exploitr.sec.scrypt.utils.CommonTools;

public class ChatsAdapter extends RecyclerView.Adapter<ChatsAdapter.ChatHolder> {
    List<SMSModel> mMessages;
    Context mContext;
    ItemClickListener clickListener;
    SecureRandom random;

    public ChatsAdapter(List<SMSModel> messages, Context context, ItemClickListener listener) {
        mMessages = messages;
        mContext = context;
        random = new SecureRandom();
        clickListener = listener;
    }

    public void setDataSet(List<SMSModel> messages) {
        mMessages = messages;
    }

    @NonNull
    @Override
    public ChatHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        var view = LayoutInflater.from(mContext).inflate(R.layout.list_message_short_item, parent, false);
        return new ChatHolder(view);
    }

    //Consumer<? super T> action
    @Override
    public void onBindViewHolder(@NonNull ChatHolder holder, int position) {
        var bind = holder.contactItemBinding;
        var item = mMessages.get(position);

        ContactManager.searchContacts(mContext, item.getADDRESS(), contacts -> {
            if (contacts.length > 0) {
                var contact = contacts[0];
                Uri r = contact.getPhotoUri();
                if (r != null) {
                    Glide.with(mContext).load(r).diskCacheStrategy(DiskCacheStrategy.ALL).into(bind.contactImg);
                }
            } else {
                CommonTools.generateDrawable(mContext, random, 18, new CommonTools.DrawableListener() {
                    @Override
                    public void onComplete(Drawable drawable) {
                        bind.contactImg.setImageDrawable(drawable);
                    }

                    @Override
                    public void onFail() {

                    }
                });
            }
        });

        bind.contactNameOrNumber.setText(item.getADDRESS());
        bind.messageUnreadIcon.setVisibility(item.getREAD() != 1 ? View.VISIBLE : View.INVISIBLE);
        //todo bind.secureModeImage.setImageResource();
        String body;
        if ((body = item.getBODY()).length() > 100) {
            bind.smsExtract.setText(body.substring(0, 97) + "...");
        } else {
            bind.smsExtract.setText(body);
        }

        bind.messageItem.setOnClickListener(v -> clickListener.onClick(item.getTHREAD()));
    }

    @Override
    public int getItemCount() {
        return mMessages.size();
    }

    static class ChatHolder extends RecyclerView.ViewHolder {
        ListMessageShortItemBinding contactItemBinding;

        public ChatHolder(@NonNull View itemView) {
            super(itemView);
            contactItemBinding = ListMessageShortItemBinding.bind(itemView);
        }
    }

    interface ItemClickListener {
        void onClick(int pos);
    }
}
