package app.exploitr.sec.scrypt.ui.chats;

import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.appcompat.content.res.AppCompatResources;
import androidx.recyclerview.widget.RecyclerView;

import java.security.SecureRandom;
import java.util.List;

import app.exploitr.sec.scrypt.R;
import app.exploitr.sec.scrypt.contacts.ContactManager;
import app.exploitr.sec.scrypt.contacts.SMSModel;
import app.exploitr.sec.scrypt.databinding.ListMessageShortItemBinding;
import contacts.core.entities.Contact;

public class ChatsAdapter extends RecyclerView.Adapter<ChatsAdapter.ChatHolder> {
    List<SMSModel> mMessages;
    Context mContext;
    clickListener clickListener;
    SecureRandom random;

    public ChatsAdapter(List<SMSModel> messages, Context context) {
        mMessages = messages;
        mContext = context;
        random = new SecureRandom();
    }

    public void setDataSet(List<SMSModel> messages) {
        mMessages = messages;
    }

    public void setPairListener(clickListener clickMessageListener) {
        clickListener = clickMessageListener;
    }

    @NonNull
    @Override
    public ChatHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        var view = LayoutInflater.from(mContext).inflate(R.layout.list_message_short_item, parent, false);
        return new ChatHolder(view);
    }

    //Consumer<? super T> action
    @Override
    public void onBindViewHolder(@NonNull ChatHolder holder, int position) {
        var bind = holder.contactItemBinding;
        var item = mMessages.get(position);

        ContactManager.searchContacts(mContext, item.getADDRESS(), contacts -> {
            var contact = contacts[0];
            Uri r = contact.getPhotoUri();
            if (r != null)
                bind.contactImg.setImageURI(r);
            else {
                Drawable con_image = AppCompatResources.getDrawable(mContext, R.drawable.ic_contact);
                Drawable back_image = AppCompatResources.getDrawable(mContext, R.drawable.back_shape_solid);
                if (con_image != null && back_image != null) {
                    back_image.setTint(Color.argb(255, random.nextInt(255), random.nextInt(255), random.nextInt(255)));

                    LayerDrawable finalDrawable = new LayerDrawable(new Drawable[]{back_image, con_image});
                    finalDrawable.setLayerInset(1, 24, 24, 24, 24);

                    bind.contactImg.setImageDrawable(finalDrawable);
                }
            }
        });

        bind.contactNameOrNumber.setText(item.getADDRESS());
        bind.messageUnreadIcon.setVisibility(item.getREAD() != 1 ? View.VISIBLE : View.INVISIBLE);
        //todo bind.secureModeImage.setImageResource();
        String body;
        if ((body = item.getBODY()).length() > 100) {
            bind.smsExtract.setText(body.substring(0, 97) + "...");
        } else {
            bind.smsExtract.setText(body);
        }
    }

    @Override
    public int getItemCount() {
        return mMessages.size();
    }

    static class ChatHolder extends RecyclerView.ViewHolder {
        ListMessageShortItemBinding contactItemBinding;

        public ChatHolder(@NonNull View itemView) {
            super(itemView);
            contactItemBinding = ListMessageShortItemBinding.bind(itemView);
        }
    }

    interface clickListener {
        void onClick(Contact contact, boolean pair);
    }
}
