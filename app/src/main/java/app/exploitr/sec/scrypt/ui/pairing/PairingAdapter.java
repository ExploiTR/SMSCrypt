package app.exploitr.sec.scrypt.ui.pairing;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import java.security.SecureRandom;

import app.exploitr.sec.scrypt.R;
import app.exploitr.sec.scrypt.databinding.ListContactItemBinding;
import app.exploitr.sec.scrypt.models.contact.ContactModel;
import app.exploitr.sec.scrypt.utils.CommonTools;
import io.realm.RealmResults;

/**
 * Adapter for pairing contacts
 * <p>
 * This adapter is used to display the contacts in the pairing fragment.
 * It is used to display the contact name, number, and photo. It also provides a toggle button to pair and unpair contacts.
 *
 * @see PairingFragment
 * @see ContactModel
 */
public class PairingAdapter extends RecyclerView.Adapter<PairingAdapter.PairingHolder> {
    RealmResults<ContactModel> mContacts;
    Context mContext;
    contactPairListener pairListener;
    SecureRandom random;


    public PairingAdapter(RealmResults<ContactModel> contacts, Context context) {
        mContacts = contacts;
        mContext = context;
        random = new SecureRandom();
    }

    public void updateDataSet(RealmResults<ContactModel> contacts) {
        mContacts = contacts;
    }

    public void setPairListener(contactPairListener contactPairListener) {
        pairListener = contactPairListener;
    }

    @NonNull
    @Override
    public PairingHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        var view = LayoutInflater.from(mContext).inflate(R.layout.list_contact_item, parent, false);
        return new PairingHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull PairingHolder holder, int position) {
        var bind = holder.contactItemBinding;
        var contact = mContacts.get(position);

        if (contact == null) return;

        bind.contactName.setText(contact.getDisplayNamePrimary());
        Uri r = contact.getPhotoUri();
        if (r != null) bind.contactImage.setImageURI(r);
        else {
            CommonTools.generateDrawable(mContext, contact.getDisplayNamePrimary(), 24, new CommonTools.DrawableListener() {
                @Override
                public void onComplete(Drawable drawable) {
                    bind.contactImage.setImageDrawable(drawable);
                }

                @Override
                public void onFail() {

                }
            });
        }

        StringBuilder builder = new StringBuilder();
        for (var number : contact.getContactNumbers())
            builder.append(number).append("\n");

        bind.contactNumber.setText(builder.toString());

        //todo toggle state
        bind.pairToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (pairListener != null) pairListener.onClick(contact, isChecked);
        });
    }

    @Override
    public int getItemCount() {
        return mContacts.size();
    }

    static class PairingHolder extends RecyclerView.ViewHolder {

        ListContactItemBinding contactItemBinding;

        public PairingHolder(@NonNull View itemView) {
            super(itemView);
            contactItemBinding = ListContactItemBinding.bind(itemView);
        }
    }

    interface contactPairListener {
        void onClick(ContactModel contact, boolean pair);
    }
}
