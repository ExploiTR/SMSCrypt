package app.exploitr.sec.scrypt.ui.pairing;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import app.exploitr.sec.scrypt.R;
import app.exploitr.sec.scrypt.databinding.ListContactItemBinding;
import contacts.core.entities.Contact;
import contacts.core.entities.PhoneEntity;

public class PairingAdapter extends RecyclerView.Adapter<PairingAdapter.PairingHolder> {
    Contact[] mContacts;
    Context mContext;
    contactPairListener pairListener;

    public PairingAdapter(Contact[] contacts, Context context) {
        mContacts = contacts;
        mContext = context;
    }

    public void setDataSet(Contact[] contacts) {
        mContacts = contacts;
    }

    public void setPairListener(contactPairListener contactPairListener) {
        pairListener = contactPairListener;
    }

    @NonNull
    @Override
    public PairingHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        var view = LayoutInflater.from(mContext).inflate(R.layout.list_contact_item, parent, false);
        return new PairingHolder(view);
    }

    //Consumer<? super T> action
    @Override
    public void onBindViewHolder(@NonNull PairingHolder holder, int position) {
        var bind = holder.contactItemBinding;
        var contact = mContacts[position];

        bind.contactName.setText(contact.getDisplayNamePrimary());
        bind.contactImage.setImageURI(contact.getPhotoUri());

        if (Boolean.TRUE.equals(contact.getHasPhoneNumber())) { //unboxing exception
            contact.getRawContacts().stream().spliterator().forEachRemaining(rawContact -> {
                rawContact.getPhones().stream().spliterator().forEachRemaining(phone -> {
                    if (phone.getType() == PhoneEntity.Type.MOBILE && !phone.isBlank()) {
                        bind.contactNumber.setText(phone.getNormalizedNumber());
                    }
                });
            });
        }

        //todo toggle state
        bind.pairToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (pairListener != null)
                pairListener.onClick(contact, isChecked);
        });
    }

    @Override
    public int getItemCount() {
        return mContacts.length;
    }

    static class PairingHolder extends RecyclerView.ViewHolder {

        ListContactItemBinding contactItemBinding;

        public PairingHolder(@NonNull View itemView) {
            super(itemView);
            contactItemBinding = ListContactItemBinding.bind(itemView);
        }
    }

    interface contactPairListener {
        void onClick(Contact contact, boolean pair);
    }
}
