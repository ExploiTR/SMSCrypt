package app.exploitr.sec.scrypt.ui.pairing;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.widget.SearchView;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;

import app.exploitr.sec.scrypt.contacts.ContactManager;
import app.exploitr.sec.scrypt.databinding.FragmentPairingBinding;
import app.exploitr.sec.scrypt.utils.PairingManager;
import contacts.core.entities.Contact;

public class PairingFragment extends Fragment {

    private PairingAdapter model;
    private FragmentPairingBinding binding;
    private final ActivityResultLauncher<String> requestPermissionLauncher =
            registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
                if (isGranted) {
                    startUI();
                    binding.reqPerm.setVisibility(View.INVISIBLE);
                } else {
                    Toast.makeText(getContext(), "Grant contact permission to pair with contacts!", Toast.LENGTH_SHORT).show();
                    binding.reqPerm.setVisibility(View.VISIBLE);
                }
            });

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentPairingBinding.inflate(inflater, container, false);
        checkPermsAndStartUI();
        return binding.getRoot();
    }

    private void checkPermsAndStartUI() {
        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
            startUI();
            binding.reqPerm.setVisibility(View.INVISIBLE);
        } else {
            binding.reqPerm.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    requestPermissionLauncher.launch(Manifest.permission.READ_CONTACTS);
                }
            });
            requestPermissionLauncher.launch(Manifest.permission.READ_CONTACTS);
        }
    }

    private void startUI() {
        ContactManager.getAllContactsArray(getContext(), contacts -> {
            model = new PairingAdapter(contacts, getActivity());
            if (binding != null) {
                binding.loadingContacts.setVisibility(View.INVISIBLE);
                binding.contactView.setAdapter(model);
                binding.contactView.setLayoutManager(new LinearLayoutManager(getContext()));

                model.setPairListener((contact, confirmPair) -> {
                    if (confirmPair) {
                        startPairing(contact);
                    } else {
                        removePair(contact);
                    }
                });
            }
        });

        binding.searchContact.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                searchTextInContacts(newText);
                return false;
            }
        });
    }

    private void searchTextInContacts(String newText) {
        ContactManager.searchContacts(getContext(), newText, contacts -> {
            if (model != null) {
                model.setDataSet(contacts);
                model.notifyDataSetChanged();
            }
        });
    }

    private void removePair(Contact contact) {
        PairingManager.delete(contact);
    }

    private void startPairing(Contact contact) {
        PairingManager.start(contact, 0, 0, PairingManager.PAIRING_MODE_REQUEST);
    }


    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}