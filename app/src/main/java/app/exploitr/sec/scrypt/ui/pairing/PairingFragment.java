package app.exploitr.sec.scrypt.ui.pairing;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;

import java.security.PublicKey;

import app.exploitr.sec.scrypt.contacts.ContactManager;
import app.exploitr.sec.scrypt.databinding.FragmentPairingBinding;
import app.exploitr.sec.scrypt.security.ECCUtil;
import app.exploitr.sec.scrypt.utils.PairingManager;
import contacts.core.entities.Contact;

public class PairingFragment extends Fragment {

    private FragmentPairingBinding binding;

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentPairingBinding.inflate(inflater, container, false);
        startUI();
        return binding.getRoot();
    }

    private void startUI() {
        var contacts = ContactManager.getAllContactsArray(getContext());
        PairingModel model = new PairingModel(contacts, getActivity());
        binding.contactView.setAdapter(model);
        binding.contactView.setLayoutManager(new LinearLayoutManager(getContext()));

        model.setPairListener((contact, confirmPair) -> {
            if (confirmPair) {
                startPairing(contact);
            } else {
                removePair(contact);
            }
        });
    }

    private void removePair(Contact contact) {

    }

    private void startPairing(Contact contact) {
        try {
            var keys = ECCUtil.generateKeys(String.valueOf(contact.getId()));
            PairingManager.sendPairingInitiationMessage();
            PairingManager.waitForPairingInitiationAck(content -> {
                try {
                    PublicKey remote = ECCUtil.stringToPublic(content);
                    var saltAndStuff = ECCUtil.generateSaltAndInfo(keys.getPublic(), remote);
                    var shSec = ECCUtil.sharedSecret(keys.getPrivate(), remote);
                    var finalKey = ECCUtil.exchangeKey(shSec, saltAndStuff[0], saltAndStuff[1]);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            //todo
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}