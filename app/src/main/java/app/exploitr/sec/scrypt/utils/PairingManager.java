package app.exploitr.sec.scrypt.utils;

import android.content.Context;

import com.google.crypto.tink.aead.subtle.AesGcmSiv;

import java.nio.charset.StandardCharsets;
import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.util.Base64;

import app.exploitr.sec.scrypt.security.ECCUtil;
import contacts.core.entities.Contact;

public class PairingManager {
    /*
     * Authentication Stages
     *
     * 1 -- Create keys & Send initial pairing request with p_key
     * 2 -- Receive pb key , generate salt & create shared acs then Send ack
     * 3 -- Receive ack & check ack
     *
     * Key format :
     *
     * pub:key
     * pub:122 bit ort pub:160 bit
     *
     * */

    private static final String PAIR_MESSAGE_INIT = "pub:%s";
    public static final int PAIRING_MODE_REQUEST = 0;
    public static final int PAIRING_MODE_ACCEPT = 1;

    public static void start(Contact contact, int rawContactIndex, int phoneIndex, int mode) {
        if (mode == PAIRING_MODE_REQUEST)
            doLevels(contact);
        else if (mode == PAIRING_MODE_ACCEPT)
            doOtherLevels(contact, rawContactIndex, phoneIndex);

    }

    private static void doOtherLevels(Contact contact, int rawContactIndex, int phoneIndex) {
        String useFulContact = contact.getRawContacts().get(rawContactIndex).getPhones().get(phoneIndex).getNumber();
    }

    private static void level01(String message, String against, Contact contact, int rawContactIndex, int phoneIndex, Context context) throws Exception {
        PublicKey remote = ECCUtil.stringToPublic(message.split("pub:")[1]);
        KeyPair pair = ECCUtil.generateKeys(String.valueOf(contact.getId()));
        SMSRecordManager.sendMessage(contact.getRawContacts().get(rawContactIndex).getPhones().get(phoneIndex).getNumber(),
                ECCUtil.publicToString(pair.getPublic()));
        updateLevel(contact.getId(), 1);
    }

    public static void doLevels(Contact contact) {

    }

    private static void level3(String message, String against, Contact contact, int rawContactIndex, int phoneIndex, Context context) {

    }

    private static void level2(String message, Contact contact, int rawContactIndex, int phoneIndex, Context context) throws Exception {
        KeyPair mine = ECCUtil.getKeysFromStore(String.valueOf(contact.getId()));
        String useFulContact = contact.getRawContacts().get(rawContactIndex).getPhones().get(phoneIndex).getNumber();
        PublicKey remote = ECCUtil.stringToPublic(message.split("pub:")[1]);

        var salt_info = ECCUtil.generateSaltAndInfo(mine.getPublic(), remote);
        AesGcmSiv final_key = ECCUtil.exchangeKey(ECCUtil.sharedSecret(mine.getPrivate(), remote), salt_info[0], salt_info[1]);

        String[] ack = generateAck();
        String true_ack = Base64.getEncoder().encodeToString(
                final_key.encrypt(ack[0].getBytes(StandardCharsets.UTF_8), generateAEAD()));
        SMSRecordManager.sendMessage(useFulContact, true_ack);
        updateLevel(contact.getId(), 2);
    }

    private static void level1(Contact contact, int rawContactIndex, int phoneIndex, long id) throws Exception {
        var pair = ECCUtil.generateKeys(String.valueOf(id));
        sendPairingInitiationMessage(contact.getRawContacts().get(rawContactIndex).getPhones().get(phoneIndex).getNumber(), pair.getPublic());
        updateLevel(contact.getId(), 1);
    }

    private static void updateLevel(long id, int level) {

    }

    private static byte[] generateAEAD() {
        SecureRandom random = new SecureRandom();
        return String.valueOf(random.nextInt(1000) * random.nextInt(5) * 5).getBytes(StandardCharsets.UTF_8);
    }

    private static String[] generateAck() {
        SecureRandom random = new SecureRandom();
        int num1 = random.nextInt(Integer.MAX_VALUE / 2);
        int num2 = random.nextInt(Integer.MAX_VALUE / 2);
        String[] stuff = new String[2];
        stuff[0] = num1 + "+" + num2;
        stuff[1] = String.valueOf(num1 + num2);
        return stuff;
    }


    public static void sendPairingInitiationMessage(String number, PublicKey mine) {
        SMSRecordManager.sendMessage(number, String.format(PAIR_MESSAGE_INIT, ECCUtil.publicToString(mine)));
    }

    public static void waitForPairingInitiationAck(PairingListener listener) {
        //onReceiveStuff todo
    }

    public static void delete(Contact contact) {
        //todo
    }

    public interface PairingListener {
        void onLevelCompleted(int level);

        void onFailure(String reason);
    }

}
